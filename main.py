from fastapi import FastAPI, Request, HTTPException
import httpx
import json
from datetime import datetime
from typing import Dict, Any, Optional, List
import os
from dotenv import load_dotenv
import logging
from pydantic import BaseModel
from whitebit_api import WhiteBitAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
WEBHOOK_SECRET = os.getenv("WEBHOOK_SECRET", "")
WHITEBIT_API_KEY = os.getenv("WHITEBIT_API_KEY")
WHITEBIT_API_SECRET = os.getenv("WHITEBIT_API_SECRET")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # URL –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä https://your-app.up.railway.app/webhook

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å—Ç—å
if not all([TELEGRAM_BOT_TOKEN, TELEGRAM_CHAT_ID, WHITEBIT_API_KEY, WHITEBIT_API_SECRET, WEBHOOK_URL]):
    logger.error("Missing required environment variables")

# –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(title="Trading Webhook to Telegram")

# –ö–ª–∏–µ–Ω—Ç –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
client = httpx.AsyncClient(timeout=30.0)

# –°–æ–∑–¥–∞—ë–º WhiteBit API –∫–ª–∏–µ–Ω—Ç
whitebit = WhiteBitAPI(WHITEBIT_API_KEY, WHITEBIT_API_SECRET)

# –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
COMMANDS = {
    "/start": "üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
    "/balance": "üí∞ –ü–æ–∫–∞–∑–∞—Ç—å –±–∞–ª–∞–Ω—Å –Ω–∞ –±–∏—Ä–∂–µ",
    "/help": "‚ùì –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–∞–º"
}

async def setup_telegram_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±—Ö—É–∫–∞ –¥–ª—è Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/setWebhook"
    webhook_url = f"{WEBHOOK_URL}/webhook"
    
    try:
        # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª–∏–º —Ç–µ–∫—É—â–∏–π –≤–µ–±—Ö—É–∫
        await client.post(f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/deleteWebhook")
        
        # –£—Å—Ç–∞–Ω–æ–≤–∏–º –Ω–æ–≤—ã–π –≤–µ–±—Ö—É–∫
        response = await client.post(url, json={
            "url": webhook_url,
            "allowed_updates": ["message"]
        })
        result = response.json()
        logger.info(f"Webhook setup result: {result}")
        return result.get("ok", False)
    except Exception as e:
        logger.error(f"Error setting up webhook: {e}")
        return False

def create_keyboard_markup() -> Dict:
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–æ–º–∞–Ω–¥–∞–º–∏"""
    keyboard = []
    row = []
    for i, (cmd, desc) in enumerate(COMMANDS.items()):
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É —Å –∫–æ–º–∞–Ω–¥–æ–π
        button = {"text": desc.split(' ', 1)[1]}  # –ë–µ—Ä–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑ —ç–º–æ–¥–∑–∏
        row.append(button)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä—è–¥—ã –ø–æ 2 –∫–Ω–æ–ø–∫–∏
        if len(row) == 2 or i == len(COMMANDS) - 1:
            keyboard.append(row)
            row = []
    
    return {
        "keyboard": keyboard,
        "resize_keyboard": True,
        "one_time_keyboard": False
    }

async def send_telegram_message(text: str, disable_notification: bool = False):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram"""
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": TELEGRAM_CHAT_ID,
        "text": text,
        "parse_mode": "HTML",
        "disable_notification": disable_notification,
        "reply_markup": create_keyboard_markup()
    }
    
    try:
        logger.info(f"Sending message to Telegram: {text[:100]}...")
        response = await client.post(url, json=payload)
        result = response.json()
        logger.info(f"Telegram API response: {result}")
        
        if not result.get("ok"):
            logger.error(f"Telegram API error: {result}")
        return result
    except Exception as e:
        logger.error(f"Error sending to Telegram: {e}")
        return None

def get_commands_list() -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥"""
    message = "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
    for cmd, desc in COMMANDS.items():
        message += f"{cmd} - {desc}\n"
    return message

async def process_telegram_command(text: str, chat_id: str) -> str:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram"""
    try:
        # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â—É—é –∫–æ–º–∞–Ω–¥—É –∏ chat_id
        logger.info(f"Processing command: {text} from chat_id: {chat_id}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏—à–ª–∞ –æ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
        if chat_id != TELEGRAM_CHAT_ID:
            logger.warning(f"Unauthorized chat_id: {chat_id}")
            return "‚õîÔ∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω"
        
        if text.startswith('/start') or text.startswith('/help'):
            return get_commands_list()
            
        elif text.startswith('/balance'):
            # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –±–∞–ª–∞–Ω—Å–∞
            logger.info("Requesting balance from WhiteBit API...")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
            balance = await whitebit.get_balance()
            
            # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            logger.info(f"Received balance: {balance}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            message = "üí∞ <b>–ë–∞–ª–∞–Ω—Å –Ω–∞ WhiteBit:</b>\n\n"
            for currency, data in balance.items():
                if float(data.get('available', 0)) > 0:
                    message += f"‚Ä¢ {currency}: {data['available']} (–≤ –æ—Ä–¥–µ—Ä–∞—Ö: {data.get('freeze', 0)})\n"
            return message
            
        else:
            return "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."
            
    except Exception as e:
        logger.error(f"Error processing command: {e}")
        return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"

@app.on_event("startup")
async def startup_event():
    """–ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
        webhook_setup = await setup_telegram_webhook()
        logger.info(f"Telegram webhook setup: {'success' if webhook_setup else 'failed'}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WhiteBit API
        api_status = await whitebit.test_connection()
        logger.info(f"WhiteBit API connection test: {'success' if api_status else 'failed'}")
        
        message = "üöÄ <b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>\n\n"
        if api_status:
            message += "‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WhiteBit API —É—Å–ø–µ—à–Ω–æ\n\n"
        else:
            message += "‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ WhiteBit API\n\n"
            
        message += get_commands_list()
        await send_telegram_message(message)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")
        await send_telegram_message(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {str(e)}")

@app.get("/")
async def root():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å–µ—Ä–≤–∏—Å —Ä–∞–±–æ—Ç–∞–µ—Ç"""
    return {
        "status": "ok",
        "service": "Trading Webhook to Telegram",
        "version": "1.0",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/health")
async def health_check():
    """Health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.post("/webhook")
async def receive_webhook(request: Request, secret: Optional[str] = None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –≤–µ–±—Ö—É–∫–æ–≤"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
        if WEBHOOK_SECRET and secret != WEBHOOK_SECRET:
            raise HTTPException(status_code=401, detail="Invalid secret")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        body = await request.json()
        logger.info(f"Received webhook body: {json.dumps(body)}")  # DEBUG: –ü–æ–ª–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –ª–∏ —ç—Ç–æ –∏–∑ Telegram
        if "message" in body and "text" in body["message"]:
            command_text = body["message"]["text"]
            chat_id = str(body["message"]["chat"]["id"])
            
            # DEBUG: –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            logger.info(f"Received Telegram message: text='{command_text}', chat_id={chat_id}")
            
            command_response = await process_telegram_command(command_text, chat_id)
            await send_telegram_message(command_response)
            return {"status": "success", "message": "Command processed"}
        
        # –ï—Å–ª–∏ –Ω–µ –∫–æ–º–∞–Ω–¥–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –≤–µ–±—Ö—É–∫
        message = f"üîî <b>–ù–æ–≤—ã–π –≤–µ–±—Ö—É–∫!</b>\n\n"
        message += f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n"
        message += f"üìä –î–∞–Ω–Ω—ã–µ:\n<pre>{json.dumps(body, indent=2, ensure_ascii=False)[:3000]}</pre>"
        
        await send_telegram_message(message)
        
        return {"status": "success", "message": "Sent to Telegram"}
        
    except json.JSONDecodeError:
        logger.error("Invalid JSON in request")
        raise HTTPException(status_code=400, detail="Invalid JSON")
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        error_msg = f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–µ–±—Ö—É–∫–∞: {str(e)}"
        await send_telegram_message(error_msg)
        raise HTTPException(status_code=500, detail=str(e))


from pydantic import BaseModel

# –ú–æ–¥–µ–ª—å –¥–ª—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞
class TradingSignalRequest(BaseModel):
    symbol: str
    side: str
    amount: float
    price: Optional[float] = None
    secret: Optional[str] = None

@app.post("/trading-signal")
async def trading_signal(request: TradingSignalRequest):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–∞
    if WEBHOOK_SECRET and request.secret != WEBHOOK_SECRET:
        raise HTTPException(status_code=401, detail="Invalid secret")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    if request.side not in ["buy", "sell"]:
        raise HTTPException(status_code=400, detail="Side must be 'buy' or 'sell'")
    
    if request.amount <= 0:
        raise HTTPException(status_code=400, detail="Amount must be positive")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = f"üìà <b>–¢–æ—Ä–≥–æ–≤—ã–π —Å–∏–≥–Ω–∞–ª</b>\n\n"
    message += f"‚Ä¢ –ü–∞—Ä–∞: <code>{request.symbol}</code>\n"
    message += f"‚Ä¢ –î–µ–π—Å—Ç–≤–∏–µ: <b>{'üü¢ –ü–û–ö–£–ü–ö–ê' if request.side == 'buy' else 'üî¥ –ü–†–û–î–ê–ñ–ê'}</b>\n"
    message += f"‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <code>{request.amount}</code>\n"
    
    if request.price:
        message += f"‚Ä¢ –¶–µ–Ω–∞: <code>{request.price}</code>\n"
        message += f"‚Ä¢ –¢–∏–ø: –õ–∏–º–∏—Ç–Ω—ã–π –æ—Ä–¥–µ—Ä\n"
    else:
        message += f"‚Ä¢ –¢–∏–ø: –†—ã–Ω–æ—á–Ω—ã–π –æ—Ä–¥–µ—Ä\n"
    
    message += f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
    await send_telegram_message(message)
    
    logger.info(f"Trading signal processed: {request.symbol} {request.side} {request.amount} @ {request.price}")
    
    return {
        "status": "success",
        "signal": {
            "symbol": request.symbol,
            "side": request.side,
            "amount": request.amount,
            "price": request.price,
            "timestamp": datetime.now().isoformat()
        }
    }


@app.post("/tradingview")
async def tradingview_webhook(request: Request):
    """–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è TradingView"""
    try:
        # TradingView –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–∞–∫ JSON, —Ç–∞–∫ –∏ —Ç–µ–∫—Å—Ç
        content_type = request.headers.get("content-type", "")
        
        if "application/json" in content_type:
            data = await request.json()
            message_text = json.dumps(data, indent=2, ensure_ascii=False)
        else:
            # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç
            body = await request.body()
            message_text = body.decode('utf-8')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message = f"üìä <b>TradingView Alert</b>\n\n"
        message += f"<pre>{message_text[:1000]}</pre>\n"
        message += f"\n‚è∞ {datetime.now().strftime('%H:%M:%S')}"
        
        await send_telegram_message(message)
        
        return {"status": "success", "source": "tradingview"}
        
    except Exception as e:
        logger.error(f"TradingView webhook error: {e}")
        raise HTTPException(status_code=500, detail=str(e))


# –î–ª—è Railway –≤–∞–∂–Ω–æ —Å–ª—É—à–∞—Ç—å –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—Ç—É
if __name__ == "__main__":
    import uvicorn
    port = int(os.getenv("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)